package com.example.fido.constants;

/*
хранит все типы Транзакций

В стандарте SQL есть четыре уровня изоляции транзакций75, которые
определяются в терминах аномалий76, которые допускаются при конкурентном
выполнении транзакций на этом уровне:

● «Грязное» чтение (Dirty read) - транзакция T1 может читать строки,
изменённые, но ещё не зафиксированные, транзакцией T2 (не было COMMIT).
Отмена изменений (ROLLBACK) в T2 приведёт к тому, что T1 прочитает данные,
которых никогда не существовало

● Неповторяющееся чтение (Non-repeatable read) - после того, как
транзакция T1 прочитала строку, транзакция T2 изменила или удалила эту
строку и зафиксировала изменения (COMMIT). При повторном чтении этой же
строки транзакция T1 видит, что строка изменена или удалена

● Фантомное чтение (Phantom read) - транзакция T1 прочитала набор
строк по некоторому условию. Затем транзакция T2 добавила строки, также
удовлетворяющие этому условию. Если транзакция T1 повторит запрос, она
получит другую выборку строк

● Аномалия сериализации (Serialization anomaly) - результат успешной
фиксации группы транзакций оказывается несогласо
*/
public final class PostgreTransactionTypes {
    /*
    Оператор видит только те строки, которые были зафиксированы до начала его выполнения. Этот уровень устанавливается по умолчанию.
    */
    public static final String READ_COMMITTED = "READ COMMITTED";

    /*
    Все операторы текущей транзакции видят только те строки,
    которые были зафиксированы перед первым запросом на выборку или изменение данных, выполненным в этой транзакции.
     */
    public static final String REPEATABLE_READ = "REPEATABLE READ";

    /*
    Все операторы текущей транзакции видят только те строки,
    которые были зафиксированы перед первым запросом на выборку или изменение данных,
    выполненным в этой транзакции.
    Если наложение операций чтения и записи параллельных сериализуемых транзакций может привести к ситуации,
    невозможной при последовательном их выполнении (когда одна транзакция выполняется за другой),
    произойдёт откат одной из транзакций с ошибкой serialization_failure (сбой сериализации).
     */
    public static final String SERIALIZABLE = "SERIALIZABLE";

    public static final String READ_WRITE = "READ WRITE";

    public static final String READ_ONLY = "READ ONLY";

    public static final String DEFERRABLE = "DEFERRABLE";
}
